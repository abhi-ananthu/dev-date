generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  githubusername String
  age            Int?
  gender         String?
  interests      String?
  location       String?
  profession     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  matchesAsUser1 Match[]   @relation("match-user-rel-1")
  matchesAsUser2 Match[]   @relation("match-user-rel-2")
  MessageAsUser1 Message[] @relation("message-user-rel-1")
  MessageAsUser2 Message[] @relation("message-user-rel-2")
}

model Match {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String   @db.ObjectId
  user2Id   String   @db.ObjectId
  matchedAt DateTime @default(now())
  status    Boolean  @default(false)

  match1 Profile @relation(name: "match-user-rel-1", fields: [user1Id], references: [id])
  match2 Profile @relation(name: "match-user-rel-2", fields: [user2Id], references: [id])
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  content    String
  sentAt     DateTime @default(now())

  sender   Profile @relation(name: "message-user-rel-1", fields: [senderId], references: [id])
  receiver Profile @relation(name: "message-user-rel-2", fields: [receiverId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
